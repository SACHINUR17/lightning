1. Microcontroller: STM32 (Assumed STM32F103 or STM32F4 series).


2. Sensor: DHT11/DHT22 for humidity and temperature detection.


3. IoT Communication: MQTT (over WiFi using ESP8266) or HTTP using a REST API.


4. Development Environment: STM32CubeMX, Keil (or STM32CubeIDE).



Necessary Components:

STM32 microcontroller (e.g., STM32F103 or STM32F4).

DHT11 or DHT22 sensor for temperature and humidity.

ESP8266 module for WiFi communication.

Power Supply (3.3V for ESP8266, 5V for STM32, or both depending on the board).


Firmware for STM32 (using STM32CubeMX and HAL Library)

1. Configure STM32CubeMX:

Set up the clock and GPIO pins for DHT11 and UART for ESP8266 communication.

Enable USART for communication with the ESP8266 module.


2. DHT11 Sensor Reading:

Below is the basic source code to read data from a DHT11 sensor and send the temperature and humidity values via UART to the ESP8266 for IoT communication.

#include "stm32f1xx_hal.h"

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

// DHT11 functions
void DHT11_Start(void);
uint8_t DHT11_Check_Response(void);
uint8_t DHT11_Read_Data(void);

// UART handle (adjust as needed)
extern UART_HandleTypeDef huart1;

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM;
int Temperature, Humidity;

void DHT11_Start(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = DHT11_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
    HAL_Delay(18);   // DHT11 Start signal
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
    HAL_Delay(20);
    
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
}

uint8_t DHT11_Check_Response(void) {
    uint8_t Response = 0;
    HAL_Delay(40);
    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
        HAL_Delay(80);
        if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
        else Response = -1;
    }
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
    return Response;
}

uint8_t DHT11_Read_Data(void) {
    uint8_t i, j;
    for (j = 0; j < 8; j++) {
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))); // Wait for the pin to go high
        HAL_Delay(40);  // 40 us delay
        if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
            i &= ~(1<<(7-j)); // If pin is low after 40 us, write 0
        } else {
            i |= (1<<(7-j));  // If pin is high after 40 us, write 1
        }
        while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));  // Wait for the pin to go low
    }
    return i;
}

void Read_DHT11(void) {
    DHT11_Start();
    if (DHT11_Check_Response()) {
        Rh_byte1 = DHT11_Read_Data();
        Rh_byte2 = DHT11_Read_Data();
        Temp_byte1 = DHT11_Read_Data();
        Temp_byte2 = DHT11_Read_Data();
        SUM = DHT11_Read_Data();

        if (SUM == (Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2)) {
            Temperature = Temp_byte1;
            Humidity = Rh_byte1;
        }
    }
}

3. Sending Data to ESP8266 via UART:

Assuming the ESP8266 is programmed to work with AT commands, the STM32 will send the data to the ESP8266 for transmission over MQTT or HTTP.

void Send_Temperature_Humidity(void) {
    char dataBuffer[50];
    sprintf(dataBuffer, "Temperature: %d C, Humidity: %d %%\n", Temperature, Humidity);
    HAL_UART_Transmit(&huart1, (uint8_t *)dataBuffer, strlen(dataBuffer), HAL_MAX_DELAY);
}

4. ESP8266 Communication:

To send the data to a cloud platform (e.g., using HTTP or MQTT), the ESP8266 module needs to be set up with AT commands. Hereâ€™s an example using HTTP:

void ESP8266_Send_HTTP(void) {
    char httpRequest[100];
    sprintf(httpRequest, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t *)httpRequest, strlen(httpRequest), HAL_MAX_DELAY);

    HAL_Delay(1000);  // Wait for connection

    sprintf(httpRequest, "AT+CIPSEND=100\r\n");
    HAL_UART_Transmit(&huart1, (uint8_t *)httpRequest, strlen(httpRequest), HAL_MAX_DELAY);

    HAL_Delay(1000);  // Wait for server ready

    sprintf(httpRequest, "GET /update?api_key=YOUR_API_KEY&field1=%d&field2=%d\r\n", Temperature, Humidity);
    HAL_UART_Transmit(&huart1, (uint8_t *)httpRequest, strlen(httpRequest), HAL_MAX_DELAY);
}

This code demonstrates the STM32 reading data from the DHT11 sensor, sending the temperature and humidity readings over UART to the ESP8266, which then communicates with an IoT platform like ThingSpeak over HTTP.
